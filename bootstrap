#!/usr/bin/env bash

# catch error
trap 'ret=$?; test $ret -ne 0 && printf "\n\e[31mBootstrap script failed to complete.\033[0m\n" >&2; exit $ret' EXIT

set -e

# check for utils file
if [ -e utils.sh ]; then
	cd "$(dirname "${BASH_SOURCE[0]}")" \
		&& . "utils.sh"
else
	printf "\n ⚠️  ./utils.sh not found\n"
	exit 1
fi

printf "
╭───────────────────────────────────────────────────╮
│                                                   │
│  ${bold}Lars' dotfiles${normal}                                   │
│                                                   │
│  Bootstrap script to get up and running quickly   │
│  on MacOS. Safe to run multiple times on the      │
│  same machine.                                    │
│                                                   │
│  ${dim}https://github.com/lgraubner/dotfiles${normal}            │
│                                                   │
╰───────────────────────────────────────────────────╯
"

chapter "Checking internet connection"
check_internet_connection

chapter "Caching password"
ask_for_sudo

chapter "Installing Dependencies"

# install xcode
if type xcode-select >&- && xpath=$( xcode-select --print-path ) &&
	test -d "${xpath}" && test -x "${xpath}" ; then
	print_success_muted "Xcode already installed."
else
	chapter "Installing Xcode…"
	xcode-select --install
	print_success "Xcode installed!"
fi

# install nvm
if [ -x nvm ]; then
	install "Installing NVM"
	curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash
	print_success "NVM installed!"
	install "Installing latest Node…"
	nvm install node
	nvm use node
	nvm run node --version
	nodev=$(node -v)
	print_success "Using Node $nodev!"
else
	print_success_muted "NVM/Node already installed. Skipping."
fi

# install homebrew
if ! [ -x "$(command -v brew)" ]; then
	install "Installing Homebrew"
	curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
	export PATH="/usr/local/bin:$PATH"
	print_success "Homebrew installed!"
else
	print_success_muted "Homebrew already installed."
fi

# install composer
if ! [ -x "$(command -v composer)" ]; then
	install "Installing Composer"
	curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer

	print_success "Composer installed!"
else
	print_success_muted "Composer already installed."
fi

# install brew formulaes
if [ -e $cwd/swag/brews ]; then
	chapter "Installing Homebrew formulae"

	for brew in $(<$cwd/swag/brews); do
		install_brews $brew
	done
fi

chapter "Updating Homebrew formulae"
brew update
print_success "Updated"

# install brew casks
if [ -e $cwd/swag/casks ]; then
	chapter "Installing apps via Homebrew"

  brew tap homebrew/cask-fonts

	for cask in $(<$cwd/swag/casks); do
	    install_application_via_brew $cask
	done
fi

# brew cleanup
chapter "Cleaning up Homebrew files"
brew cleanup 2> /dev/null

print_success "Cleaned up"

# install npm packages
if [ -e $cwd/swag/npm ]; then
	chapter "Installing npm packages"

  for pkg in $(<$cwd/swag/npm); do
	    install_npm_packages $pkg
	done
fi

# install npm completions
npm completion > /usr/local/etc/bash_completion.d/npm

# @TODO
RBENV_RUBY_VERSION=`rbenv version`
if [[ ! "$RBENV_RUBY_VERSION" =~ ^2\.6\.0.* ]]; then
  chapter "Installing stable Ruby version"
  install_rbenv_ruby
fi

# install ruby gems
if [ -e $cwd/swag/gems ]; then
	chapter "Installing ruby gems"

  for gem in $(<$cwd/swag/gems); do
	    install_ruby_gems $gem
	done
fi

# symlink files
chapter "Linking dotfiles"
symlink_dotfiles

# create code folder
chapter "Creating folders"
mkdir -p ~/code
print_success "Created ~/code"

# reload shell to apply changes
reload

cd "$(dirname "${BASH_SOURCE}")";

printf "
All done!
"
