#!/usr/bin/env bash

# catch error
trap 'ret=$?; test $ret -ne 0 && printf "\n\e[31mBootstrap script failed to complete.\033[0m\n" >&2; exit $ret' EXIT

set -e

# check for utils file
if [ -e utils.sh ]; then
    cd "$(dirname "${BASH_SOURCE[0]}")" \
        && . "utils.sh"
else
    printf "\n ⚠️  ./utils.sh not found\n"
    exit 1
fi

printf "
╭───────────────────────────────────────────────────╮
│                                                   │
│  ${bold}Lars' dotfiles${normal}                                   │
│                                                   │
│  Bootstrap script to get up and running quickly   │
│  on MacOS. Safe to run multiple times on the      │
│  same machine.                                    │
│                                                   │
│  ${dim}https://github.com/lgraubner/dotfiles${normal}            │
│                                                   │
╰───────────────────────────────────────────────────╯
"

chapter "Checking internet connection"
check_internet_connection

chapter "Caching password"
ask_for_sudo

chapter "Installing Dependencies"

# install xcode
if type xcode-select >&- && xpath=$( xcode-select --print-path ) &&
    test -d "${xpath}" && test -x "${xpath}" ; then
    print_success_muted "Xcode already installed."
else
    chapter "Installing Xcode…"
    xcode-select --install
    print_success "Xcode installed!"
fi

# install rosetta if m1 mac
if [[ $OSTYPE == darwin* && $CPUTYPE == arm64 ]]; then
    sudo softwareupdate --install-rosetta
fi

# install homebrew
if ! [ -x "$(command -v brew)" ]; then
    install "Installing Homebrew"
    curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
    eval "$(/opt/homebrew/bin/brew shellenv)"
    print_success "Homebrew installed!"
else
    print_success_muted "Homebrew already installed."
fi

# install brew formulaes
if [ -e $cwd/swag/brews ]; then
    chapter "Installing Homebrew formulae"

    for brew in $(<$cwd/swag/brews); do
        install_brews $brew
    done
fi

chapter "Updating Homebrew formulae"
brew update
print_success "Updated"

# install brew casks
if [ -e $cwd/swag/casks ]; then
    chapter "Installing apps via Homebrew"

  brew tap homebrew/cask-fonts

    for cask in $(<$cwd/swag/casks); do
        install_application_via_brew $cask
    done
fi

install_extra=${EXTRA:=false}

if [ $install_extra = "true" ]; then
    if [ -e $cwd/swag/casks_extra ]; then
        chapter "Installing extra apps via Homebrew"

        for cask in $(<$cwd/swag/casks_extra); do
            install_application_via_brew $cask
        done
    fi
fi

# brew cleanup
chapter "Cleaning up Homebrew files"
brew cleanup 2> /dev/null

print_success "Cleaned up"

# install npm packages
if [ -e $cwd/swag/npm ]; then
    chapter "Installing npm packages"

    for pkg in $(<$cwd/swag/npm); do
        install_npm_packages $pkg
    done
fi

# install pure prompt via git
if [ -d $HOME/.zsh/pure ]; then
    print_success_muted "Pure prompt already installed."
else
    chapter "Install Pure ZSH Prompt"
    mkdir -p "$HOME/.zsh"
    git clone https://github.com/sindresorhus/pure.git "$HOME/.zsh/pure"
    print_success "Pure prompt installed!"
fi

chapter "Installing vim-plug"
sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
print_success "vim-plug installed!"

# install npm completions
npm completion > /opt/homebrew/share/zsh/site-functions/npm

# symlink files
chapter "Linking dotfiles"
./install

# create code folder
chapter "Creating folders"
mkdir -p $HOME/code
print_success "Folder successfully created!"

# reload shell to apply changes
reload

cd $WORKSPACE

printf "
All done!
"
