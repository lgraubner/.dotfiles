#!/usr/bin/env bash

# catch error
trap 'ret=$?; test $ret -ne 0 && printf "\n\e[31mBootstrap script failed to complete.\033[0m\n" >&2; exit $ret' EXIT

set -e

# check for utils file
if [ -e utils ]; then
	cd "$(dirname "${BASH_SOURCE[0]}")" \
		&& . "utils"
else
	printf "\n ⚠️  ./utils not found\n"
	exit 1
fi

printf "
╭───────────────────────────────────────────────────╮
│                                                   │
│  ${bold}Lars' dotfiles${normal}                                   │
│                                                   │
│  Bootstrap script to get up and running quickly   │
│  on MacOS. Safe to run multiple times on the      │
│  same machine.                                    │
│                                                   │
│  ${dim}https://github.com/lgraubner/dotfiles${normal}            │
│                                                   │
╰───────────────────────────────────────────────────╯
"

chapter "Checking internet connection"
check_internet_connection

chapter "Caching password"
ask_for_sudo

chapter "Installing Dependencies"

# install xcode
if type xcode-select >&- && xpath=$( xcode-select --print-path ) &&
	test -d "${xpath}" && test -x "${xpath}" ; then
	print_success_muted "Xcode already installed."
else
	chapter "Installing Xcode…"
	xcode-select --install
	print_success "Xcode installed!"
fi

# install homebrew
if ! [ -x "$(command -v brew)" ]; then
	install "Installing Homebrew"
	curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
	export PATH="/usr/local/bin:$PATH"
	print_success "Homebrew installed!"
else
	print_success_muted "Homebrew already installed."
fi

# install composer
if ! [ -x "$(command -v composer)" ]; then
	install "Installing Composer"
	curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer

	print_success "Composer installed!"
else
	print_success_muted "Composer already installed."
fi

# install brew formulaes
if [ -e $cwd/swag/brews ]; then
	chapter "Installing Homebrew formulae"

	for brew in $(<$cwd/swag/brews); do
		install_brews $brew
	done
fi

chapter "Updating Homebrew formulae"
brew update
print_success "Updated"

# install brew casks
if [ -e $cwd/swag/casks ]; then
	chapter "Installing apps via Homebrew"

	for cask in $(<$cwd/swag/casks); do
	    install_application_via_brew $cask
	done
fi

# brew cleanup
chapter "Cleaning up Homebrew files"
brew cleanup 2> /dev/null
brew cask cleanup 2> /dev/null

print_success "Cleaned up"

# install npm packages
if [ -e $cwd/swag/npm ]; then
	chapter "Installing npm packages"

  for pkg in $(<$cwd/swag/npm); do
	    install_npm_packages $pkg
	done
fi

chapter "Install node versions via n"
versions=("lts" "latest" "stable")

for version in "${versions[@]}"; do
  n $version &>/dev/null
  print_success "Node $version installed"
done

chapter "Activate ZSH"
if [ -n "$ZSH_VERSION" ]; then
  print_success_muted "ZSH already activated."
else
  chsh -s $(which zsh)
  print_success "ZSH activated"
fi

# create home bin and copy binaries
if [ ! -d "$homebin" ]; then
	mkdir "$homebin"
fi

chapter "Copying custom binaries"
cp -r "$cwd/bin/." "$homebin"
print_success "Copied"

# symlink files
symlink_dotfiles

# reload shell to apply changes-
reload

cd "$(dirname "${BASH_SOURCE}")";

printf "
All done!
"
