#!/usr/bin/env bash

# catch error
trap 'ret=$?; test $ret -ne 0 && printf "\n\e[31mBootstrap script failed to complete.\033[0m\n" >&2; exit $ret' EXIT

set -e

# check for utils file
if [ -e utils.sh ]; then
    cd "$(dirname "${BASH_SOURCE[0]}")" \
        && . "utils.sh"
else
    printf "\n ⚠️  ./utils.sh not found\n"
    exit 1
fi

printf "
╭───────────────────────────────────────────────────╮
│                                                   │
│  ${bold}Lars' dotfiles${normal}                                   │
│                                                   │
│  Bootstrap script to get up and running quickly   │
│  on MacOS. Safe to run multiple times on the      │
│  same machine.                                    │
│                                                   │
│  ${dim}https://github.com/lgraubner/dotfiles${normal}            │
│                                                   │
╰───────────────────────────────────────────────────╯
"

chapter "Checking internet connection"
check_internet_connection

chapter "Caching password"
ask_for_sudo

chapter "Installing Dependencies"

# install xcode
if type xcode-select >&- && xpath=$( xcode-select --print-path ) &&
    test -d "${xpath}" && test -x "${xpath}" ; then
    print_success_muted "Xcode already installed."
else
    chapter "Installing Xcode…"
    xcode-select --install
    print_success "Xcode installed!"
fi

# install rosetta if m1 mac
if [[ $OSTYPE == darwin* && $CPUTYPE == arm64 ]]; then
    sudo softwareupdate --install-rosetta
fi

# install nvm
if [ -x nvm ]; then
    install "Installing NVM"
    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash
  cp swag/npm "$NVM_DIR/default-packages"
    print_success "NVM installed!"
    install "Installing Node LTS…"
    nvm install --lts
    nvm use --lts
    nvm run node --version
    nodev=$(node -v)
    print_success "Using Node $nodev!"
else
    print_success_muted "NVM/Node already installed. Skipping."
fi

# install homebrew
if ! [ -x "$(command -v brew)" ]; then
    install "Installing Homebrew"
    curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
    eval "$(/opt/homebrew/bin/brew shellenv)"
    print_success "Homebrew installed!"
else
    print_success_muted "Homebrew already installed."
fi

# install brew formulaes
if [ -e $cwd/swag/brews ]; then
    chapter "Installing Homebrew formulae"

    for brew in $(<$cwd/swag/brews); do
        install_brews $brew
    done
fi

chapter "Updating Homebrew formulae"
brew update
print_success "Updated"

# install brew casks
if [ -e $cwd/swag/casks ]; then
    chapter "Installing apps via Homebrew"

  brew tap homebrew/cask-fonts

    for cask in $(<$cwd/swag/casks); do
        install_application_via_brew $cask
    done
fi

# brew cleanup
chapter "Cleaning up Homebrew files"
brew cleanup 2> /dev/null

print_success "Cleaned up"

# install npm packages
if [ -e $cwd/swag/npm ]; then
    chapter "Installing npm packages"

    for pkg in $(<$cwd/swag/npm); do
        install_npm_packages $pkg
    done
fi

# install pure prompt via git
if [ -d $HOME/.zsh/pure ]; then
    print_success_muted "Pure prompt already installed."
else
    chapter "Install Pure ZSH Prompt"
    mkdir -p "$HOME/.zsh"
    git clone https://github.com/sindresorhus/pure.git "$HOME/.zsh/pure"
    print_success "Pure prompt installed!"
fi

# install npm completions
npm completion > /usr/local/share/zsh/site-functions/npm

chapter "Activate ZSH shell"
sudo -s echo "$(which zsh)" >> /etc/shells && chsh -s $(which zsh)

# symlink files
chapter "Linking dotfiles"
symlink_dotfiles

# copy iTerm2 settings folder
if [ -d $HOME/.iTerm2 ]; then
    print_success_muted "iTerm2 settings folder already created."
else
    chapter "Creating iTerm2 settings folder"
    cp -r iTerm2 ~/.iTerm2
    print_success "Folder successfully created!"
fi


# create code folder
chapter "Creating folders"
mkdir -p ~/code
print_success "Folder successfully created!"

# reload shell to apply changes
reload

cd $WORKSPACE

printf "
All done!
"
